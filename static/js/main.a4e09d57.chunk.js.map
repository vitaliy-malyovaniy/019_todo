{"version":3,"sources":["store/actions.js","components/TaskList/index.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["addNewTask","task","type","ADD_NEW_TASK","payload","onDoneHandler","console","log","onRemoveHandler","connect","state","Object","objectSpread","dispatch","setTaskDone","DONE_TASK","doneTask","props","tasks","react_default","a","createElement","map","el","index","key","name","done","onClick","App","submitHandler","e","preventDefault","target","value","reset","_this2","this","_this$props","className","action","onSubmit","event","components_TaskList","Component","bindActionCreators","Boolean","window","location","hostname","match","initState","user","__webpack_require__","d","__webpack_exports__","store","createStore","arguments","length","undefined","concat","toConsumableArray","i","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4e09d57.chunk.js","sourcesContent":["import {ADD_NEW_TASK, DONE_TASK} from \"../index\";\n\nexport const addNewTask = (task) => {\n    return {\n        type: ADD_NEW_TASK,\n        payload: task\n    }\n};\n\nexport const doneTask = (task) => {\n    return {\n        type: DONE_TASK,\n        payload: task\n    }\n};","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {doneTask} from \"../../store/actions\";\nimport {connect} from \"react-redux\";\n\nconst TaskList = (props) => {\n\n    const {tasks} = props;\n    console.log(props);\n\n    return (\n        <ul>\n            {tasks.map((el, index) => (\n                <li key={index}>\n                    {el.name}\n                    {\n                        el.done?\"\":<button onClick={onDoneHandler}>Done</button>\n                    }\n                    <button onClick={onRemoveHandler}>Remove</button>\n                </li>\n            ))}\n        </ul>\n    )\n};\n\nconst onDoneHandler = () => {\n    console.log(\"onDoneHandler\")\n};\n\nconst onRemoveHandler = () => {\n    console.log(\"onRemoveHandler\")\n};\n\nconst mapStateToPorps = state => ({...state});\nconst mapActionsToProps = dispatch =>{\n    return {\n        setTaskDone: task => dispatch(doneTask(task))\n    }\n};\n\nexport default connect(mapStateToPorps,mapActionsToProps)(TaskList);","import React, { Component } from 'react';\n\nimport TaskList from \"./components/TaskList\";\nimport {addNewTask} from \"./store/actions\";\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from \"redux\";\n\nclass App extends Component {\n    render() {\n        console.log(this.props);\n        const {tasks, addNewTask} = this.props;\n\n        return (\n            <div className=\"App\">\n                <form action=\"\" onSubmit={(event)=>{\n                    this.submitHandler(event, addNewTask)\n                }}>\n                    <input type=\"text\"/>\n                    <button>Add task</button>\n                </form>\n\n                <TaskList tasks={tasks}/>\n            </div>\n        );\n    }\n\n    submitHandler = (e,addNewTask) => {\n        e.preventDefault();\n        console.log(\"submitHandler\",e.target[0].value);\n        addNewTask(e.target[0].value);\n        e.target.reset();\n    }\n}\n\nconst putStateToProps = (state) => {\n    return {\n        ...state\n    }\n};\n\nconst putActionsToComponent = (dispatch) => {\n    return {\n        addNewTask: bindActionCreators(addNewTask,dispatch)\n    }\n};\n\nexport default connect(\n    putStateToProps,\n    putActionsToComponent\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_NEW_TASK, DONE_TASK} from \"../index\";\n\nconst initState = {\n    tasks: [\n        {name: \"Wake up\", done:false}\n    ],\n    user: null\n};\n\nexport const reducer = (state=initState,action) => {\n\n    console.log(action);\n\n    switch (action.type) {\n        case ADD_NEW_TASK:\n            return {\n                ...state, tasks: [...state.tasks, {name: action.payload, done:false}]\n            };\n        case DONE_TASK:\n            // state.tasks[action.payload].done = true;\n            return {\n                // ...state, tasks: state.tasks\n                ...state, tasks: state.tasks.map((el, i) => action.payload === i?{...el, done:true}:el)\n            };\n    }\n    return state;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducer} from \"./store/reducer\";\n\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\nexport const DONE_TASK = \"DONE_TASK\";\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(store.getState());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}